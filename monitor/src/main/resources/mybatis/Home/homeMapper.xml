<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="igloosec.monitor.mapper.HomeMapper">
    <select id="selectUsage" parameterType="UsageVo" resultType="UsageVo">
        SELECT substring(event_date,9,2) AS idate ,round(event_volume/1024/1024) AS usage_data FROM tm_stats
        WHERE event_date LIKE '${paramDate}%' AND rscgrp ='${rscparam}'
    </select>


    <select id="selectUsagebefore" parameterType="UsageVo"  resultType="UsageVo">
        SELECT substring(event_date,9,2) AS idate ,round(event_volume/1024/1024) AS usage_data FROM tm_stats
        WHERE event_date LIKE '${paramDate}%' AND rscgrp ='${rscparam}'
    </select>


    <select id="selectMeterDetail" parameterType="UsageVo" resultType="UsageVo">
        SELECT meterCategory,'Storage' as meterSubCategory,CONCAT(ROUND(quantity,2)*10,'K' ) AS quantity, unitOfMeasure, CASE WHEN '${country}' != 'KR' THEN CONCAT(usd,' $') ELSE CONCAT(kor,' KRW') END as costInBillingCurrency
        FROM(
             SELECT meterCategory,meterSubCategory, sum(quantity) AS quantity, unitOfMeasure ,round(sum(costInUsd),0) as usd ,round(sum(costInBillingCurrency),0) as kor FROM USED_AMOUNT
             WHERE substring(DATE,1,2) ='${paraMonth}' AND substring(DATE,7,10) ='${paraYear}' and resourceGroupName ='${rscparam}'
             GROUP BY meterCategory, unitOfMeasure, meterSubCategory ORDER BY quantity desc
        )a where quantity <![CDATA[>=]]> 0.01 and meterSubCategory LIKE '%Managed Disks' and unitOfMeasure ='10K'
        UNION
        SELECT meterCategory,'Virtual Machines' as meterSubCategory,CONCAT(ROUND(quantity,2)*10 , CASE WHEN unitOfMeasure Like '10%' THEN substring(unitOfMeasure,3,5) WHEN unitOfMeasure LIKE '1 %' THEN substring(unitOfMeasure,3,10) ELSE substring(unitOfMeasure,2,10) END ) AS quantity, unitOfMeasure, CASE WHEN '${country}' != 'KR' THEN CONCAT(usd,' $') ELSE CONCAT(kor,' KRW') END as costInBillingCurrency
        FROM(
            SELECT meterCategory,meterSubCategory, sum(quantity) AS quantity, unitOfMeasure,round(sum(costInUsd),0) as usd ,round(sum(costInBillingCurrency),0) as kor
            FROM USED_AMOUNT
            WHERE substring(DATE,1,2) ='${paraMonth}' AND substring(DATE,7,10) ='${paraYear}' and resourceGroupName ='${rscparam}'
            GROUP BY meterCategory, unitOfMeasure, meterSubCategory ORDER BY quantity desc
        )b where quantity <![CDATA[>=]]> 0.01 and meterSubCategory LIKE 'Virtual Machines%'
        UNION
        SELECT meterCategory, meterSubCategory,CONCAT(ROUND(quantity,2)*10 , CASE WHEN unitOfMeasure Like '10%' THEN substring(unitOfMeasure,3,5) WHEN unitOfMeasure LIKE '1 %' THEN substring(unitOfMeasure,3,10) ELSE substring(unitOfMeasure,2,10) END ) AS quantity, unitOfMeasure, CASE WHEN '${country}' != 'KR' THEN CONCAT(usd,' $') ELSE CONCAT(kor,' KRW') END as costInBillingCurrency
        FROM(

         SELECT meterCategory,meterSubCategory, sum(quantity) AS quantity, unitOfMeasure,round(sum(costInUsd),0) as usd ,round(sum(costInBillingCurrency),0) as kor
         FROM USED_AMOUNT
         WHERE substring(DATE,1,2) ='${paraMonth}' AND substring(DATE,7,10) ='${paraYear}' and resourceGroupName ='${rscparam}' and meterSubCategory NOT LIKE 'Virtual Machines%'
         GROUP BY meterCategory, unitOfMeasure, meterSubCategory ORDER BY quantity desc
     )c where quantity <![CDATA[>=]]> 0.01 and meterSubCategory NOT LIKE '%Managed Disks'
        UNION
        SELECT meterCategory,'Storage2' as meterSubCategory,CONCAT(ROUND(quantity,2)*10,'K/Month' ) AS quantity, unitOfMeasure, CASE WHEN '${country}' != 'KR' THEN CONCAT(usd,' $') ELSE CONCAT(kor,' KRW') END as costInBillingCurrency
        FROM(
                SELECT meterCategory,meterSubCategory, sum(quantity) AS quantity, unitOfMeasure ,round(sum(costInUsd),0) as usd ,round(sum(costInBillingCurrency),0) as kor FROM USED_AMOUNT
                WHERE substring(DATE,1,2) ='${paraMonth}' AND substring(DATE,7,10) ='${paraYear}' and resourceGroupName ='${rscparam}'
                GROUP BY meterCategory, unitOfMeasure, meterSubCategory ORDER BY quantity desc
     )d where quantity >= 0.01 and (meterSubCategory LIKE '%Managed Disks' or meterSubCategory LIKE '%disks' ) and unitOfMeasure ='1/Month'
    </select>


    <select id="selectMeterSum" parameterType="UsageVo"  resultType="UsageVo">
        SELECT meterCategory, round(SUM(costInBillingCurrency),2) as costInBillingCurrency FROM USED_AMOUNT
        WHERE substring(DATE,1,2) ='${paraMonth}' AND substring(DATE,7,10) ='${paraYear}' and resourceGroupName ='${rscparam}'
        GROUP BY meterCategory;

    </select>


    <select id="registerLog" parameterType="UsageVo">
        insert into USER_EQUIP_LIST (email, equip,usages,logid)
        values (#{emailparam}, #{equipparam},${usageparam},#{logid});
    </select>

    <select id="joinMember" parameterType="MemberVo">
        insert into USER_LIST (email, passwd,regDate,company,qrcord,secretkey,cloud_vendor)
        values (#{email}, #{passwd},NOW(),#{company},#{qrcord},#{secretkey}, 'AZURE');
    </select>

    <select id="checkMember" parameterType="MemberVo" resultType="MemberVo">
       select * from USER_LIST where email ='${email}'
    </select>

    <select id="rscCheck" parameterType="MemberVo" resultType="MemberVo">
        select rscgrp as rscGrp from product_apply where rscgrp ='${rscGrp}'
    </select>


    <select id="checkResetMember" parameterType="MemberVo" resultType="MemberVo">
        select DISTINCT email  from USER_LIST A, leads_info B where customer_email =email and email='${email}' and CONCAT(customer_last_name,customer_first_name) ='${name}';
    </select>

    <select id="selectLeadsList" parameterType="String" resultType="LeadsInfoVo">
        select 'AZURE' as vendor, row_key as rowKey ,offer_display_name as offerDisplayName, customer_country as customerCountry,CONCAT(substring(crt_dtm,1,4),'.',substring(crt_dtm,5,2),'.',substring(crt_dtm,7,2),' ',substring(crt_dtm,9,2),':',substring(crt_dtm,11,2),':',substring(crt_dtm,13,2)) as createdTime
        from leads_info
        where customer_email ='${emailStr}'
    </select>

    <select id="selectLogList" parameterType="UsageVo" resultType="UsageVo">
        select equip,usages,logid from USER_EQUIP_LIST where email ='${emailparam}'
    </select>

    <delete id="deleteLog" parameterType="String">
        delete from USER_EQUIP_LIST where logid = #{logid};
    </delete>


    <update id="completeLog" parameterType="MemberVo">
        update USER_LIST SET step = 1, cost_type =#{costParam}  where email = #{email};

    </update>

    <update id="completeLog2" parameterType="MemberVo">
        update USER_LIST SET step = 2, vm_series_id = #{id} where email = #{email};

    </update>


    <update id="completeApplyLog" parameterType="MemberVo">
        update product_apply SET cost_type =#{costParam}  where email = #{email};

    </update>

    <update id="completeApplyLog2" parameterType="MemberVo">
        update product_apply SET vm_series_id = #{id} where email = #{email};
    </update>

    <update id="goBack" parameterType="String">
        update USER_LIST SET step = 0 where email = #{email};

    </update>

    <update id="resetPass" parameterType="MemberVo">
        update USER_LIST SET passwd = #{passwd} where email = #{email};

    </update>


    <select id="selectCostTotal" parameterType="UsageVo" resultType="UsageVo">
        SELECT round(costtotal* (SELECT exchangeRatePricingToBilling FROM USED_AMOUNT ORDER BY DATE DESC LIMIT 1),-3) AS costtotal,
               round(oneyearCostTotal* (SELECT exchangeRatePricingToBilling FROM USED_AMOUNT ORDER BY DATE DESC LIMIT 1),-3) AS oneyearCostTotal,
               round(threeyearCostTotal* (SELECT exchangeRatePricingToBilling FROM USED_AMOUNT ORDER BY DATE DESC LIMIT 1),-3) AS threeyearCostTotal,
               cpu, ram, disk, vmseries, pathStr, shellcom, id
        FROM azurecost WHERE beforeSize<![CDATA[<]]> #{usageparam} AND #{usageparam}<![CDATA[<=]]>logSize;
    </select>

    <select id="selectPath"  resultType="String">
        SELECT pathStr
        FROM azurecost
        LIMIT 1
    </select>


    <select id="getGrpList"  resultType="MemberVo">
        SELECT rscGrp,company,email
        FROM USER_LIST
        where rscGrp !=''

    </select>

    <select id="getCustGrpList"  resultType="MemberVo" parameterType="MemberVo">
        select rscgrp as rscGrp,productName as product from product_apply where email=#{email} and rscgrp!='';

    </select>

    <select id="selectSecretKey"  parameterType="MemberVo" resultType="String">
        SELECT secretkey
        FROM USER_LIST where email = #{email};
    </select>

    <select id="selectQrCord"  parameterType="MemberVo" resultType="String">
        SELECT qrcord
        FROM USER_LIST where email = #{email};
    </select>

    <select id="selectMember" resultType="MemberVo" parameterType="String">
        SELECT  * FROM USER_LIST a , leads_info b
        where a.email = b.customer_email and a.email = #{email}
            limit 1
    </select>

    <select id="selectShellParam" resultType="UsageVo" parameterType="String">
        SELECT DISTINCT customer_country AS country,replace(offer_display_name, ' ', '_') AS product, cloud_vendor AS vendor
        FROM leads_info a,USER_LIST b
        WHERE a.customer_email = b.email
        AND customer_email = #{email}
        order by a.crt_dtm desc
        LIMIT 1
    </select>

    <select id="selectConfig" resultType="ConfigVo">
        SELECT cfg_key AS cfgKey, cfg_value AS cfgVal FROM config
    </select>

    <select id="getPeriod" resultType="String" parameterType="MemberVo">
        SELECT cost_type as period FROM USER_LIST where email = #{email};
    </select>


    <insert id="leadsToProduct" parameterType="LeadsInfoVo">
        INSERT INTO product_apply(
                                  apply_id
                                 ,email
                                 ,prod_id
                                 ,region
                                 ,vendor
                                 ,regDate
                                 ,productName
                                 ,rscgrp
        )
        VALUES
        (
        #{rowKey}
        ,#{emailAddr}
        ,#{offerDisplayName}
        ,#{customerCountry}
        ,#{vendor}
        ,now()
        ,#{offerDisplayName}
        ,#{rscGrp}
        )

    </insert>


    <update id="goNext" parameterType="LeadsInfoVo">
        update USER_LIST SET step = 0,rowkey = #{rowKey} where email = #{emailAddr};
    </update>


    <update id="goChoice" parameterType="String">
        update USER_LIST SET step = 100,rowkey ='' where email = #{email};
    </update>

    <delete id="deleteChoice1" parameterType="String">
        delete from USER_EQUIP_LIST where email = #{email};
    </delete>

    <delete id="deleteChoice2" parameterType="String">
        delete from product_apply where email = #{email};
    </delete>

<!--    <select id="getPaymentGroup" resultType="MemberVo" >
        select ul.email, round(a.costTotal * (SELECT exchangeRatePricingToBilling FROM USED_AMOUNT ORDER BY DATE DESC LIMIT 1),-3) as costInBillingCurrency
        from USER_LIST ul, azurecost a
        where ul.vm_series_id = a.id and ul.cost_type = 'noRe' and IFNULL(ul.vm_series_id,"") !=''
        UNION
        select ul.email, round(a.oneyearCostTotal * (SELECT exchangeRatePricingToBilling FROM USED_AMOUNT ORDER BY DATE DESC LIMIT 1),-3) as costInBillingCurrency
        from USER_LIST ul, azurecost a
        where ul.vm_series_id = a.id and ul.cost_type = 'Re1' and IFNULL(ul.vm_series_id,"") !=''
        UNION
        select ul.email, round(a.threeyearCostTotal * (SELECT exchangeRatePricingToBilling FROM USED_AMOUNT ORDER BY DATE DESC LIMIT 1),-3) as costInBillingCurrency
        from USER_LIST ul, azurecost a
        where ul.vm_series_id = a.id and ul.cost_type = 'Re3' and IFNULL(ul.vm_series_id,"") !=''
    </select>


    <select id="getPaymentGroup" resultType="MemberVo" >
          SELECT  b.email as email, round(SUM(costInBillingCurrency),0) + (select (CASE WHEN b.cost_type ='noRe' THEN noRe WHEN  b.cost_type ='Re1' THEN Re1 ELSE Re3 END)  from license a where a.size =b.vm_series_id ) as costInBillingCurrency
          FROM USED_AMOUNT a,USER_LIST b, leads_info li
          WHERE a.resourceGroupName = b.rscGrp and substring(DATE,1,2) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),6,2)AND substring(DATE,7,10) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),1,4)
          and resourceGroupName in ( select rscGrp from USER_LIST pa where   IFNULL(pg, '') !='') and li.customer_email = b.email and li.customer_country = 'KR'
        GROUP BY resourceGroupName;

    </select>

    <select id="getPaymentGroupOverseas" resultType="MemberVo">
        SELECT  b.email as email, exchangeRatePricingToBilling, round(SUM(costInUsd),0) + round((select (CASE WHEN b.cost_type ='noRe' THEN noRe WHEN  b.cost_type ='Re1' THEN Re1 ELSE Re3 END)  from license a where a.size =b.vm_series_id ) / exchangeRatePricingToBilling, 0) as costInBillingCurrency
        FROM USED_AMOUNT a,USER_LIST b, leads_info li
        WHERE a.resourceGroupName = b.rscGrp and substring(DATE,1,2) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),6,2)AND substring(DATE,7,10) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),1,4)
          and resourceGroupName in ( select rscGrp from USER_LIST pa where   IFNULL(pg, '') !='') and li.customer_email = b.email and li.customer_country != 'KR'
        GROUP BY resourceGroupName;
    </select>
    -->

    <select id="getPaymentGroup" resultType="MemberVo" >
        SELECT *, (billingResource + billingLicense) as costInBillingCurrency
        FROM
            (SELECT  b.email as email, round(SUM(costInBillingCurrency),0) as billingResource, round((select (CASE WHEN b.cost_type ='noRe' THEN noRe WHEN  b.cost_type ='Re1' THEN Re1 ELSE Re3 END)  from license a where a.size =b.vm_series_id ), 0) as billingLicense
             FROM USED_AMOUNT a,USER_LIST b, leads_info li
             WHERE a.resourceGroupName = b.rscGrp and substring(DATE,1,2) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),6,2)AND substring(DATE,7,10) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),1,4)
               and resourceGroupName in ( select rscGrp from USER_LIST pa where   IFNULL(pg, '') !='') and li.customer_email = b.email and li.customer_country = 'KR'
        GROUP BY resourceGroupName) newT
    </select>

    <select id="getPaymentGroupOverseas" resultType="MemberVo">
        SELECT *, (billingResource + billingLicense) as costInBillingCurrency
        FROM
            (SELECT  b.email as email, exchangeRatePricingToBilling, round(SUM(costInUsd),0) as billingResource, ROUND((select (CASE WHEN b.cost_type ='noRe' THEN noRe WHEN  b.cost_type ='Re1' THEN Re1 ELSE Re3 END)  from license a where a.size =b.vm_series_id ) / exchangeRatePricingToBilling, 0) as billingLicense
             FROM USED_AMOUNT a,USER_LIST b, leads_info li
             WHERE a.resourceGroupName = b.rscGrp and substring(DATE,1,2) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),6,2)AND substring(DATE,7,10) =SUBSTRING( DATE_SUB(  curdate(),  INTERVAL 1 month  ),1,4)
               and resourceGroupName in ( select rscGrp from USER_LIST pa where   IFNULL(pg, '') !='') and li.customer_email = b.email and li.customer_country != 'KR'
        GROUP BY resourceGroupName) newT;
    </select>

    <select id="getBillingList" resultType="BillingVo"  parameterType="BillingVo" >
        select a.email,b.pg as pg, paydate, resource, license, billingsum,billingtype, currency
        from billing a, USER_LIST b
        where a.email = b.email and a.paydate = #{paydate} AND (CASE WHEN #{role} = 'ROLE_USER' THEN a.email = #{email} ELSE 1 = 1 END)

    </select>


    <insert id="insertBilling" parameterType="BillingVo">
        INSERT INTO billing(
                                  email
                                 ,paydate
                                 ,resource
                                 ,license
                                 ,billingsum
                                 ,billingtype
                                 ,currency
        )
        VALUES
        (
            #{email}
        ,#{paydate}
        ,#{resource}
        ,#{license}
        ,#{billingsum}
        ,#{billingtype}
        ,#{currency}
        )

    </insert>

    <update id="updateUserPg" parameterType="BillingVo">
        update USER_LIST SET pg = #{pg} where email = #{email};
    </update>


</mapper>


